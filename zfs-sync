#!/bin/sh

SSH_ARGS=""
EXCLUDES_BASE="/usr/local/etc/zfs-sync.excludes"

usage()
{
    echo "USAGE: $0 [-s volume] [-T host] [-a ssh_args] [-p type] [-c] [-m] [-n] [-v] [-x excludes] destination"
    printf "\\t[-s vol]\\tSource zfs volume (defaults to all)\\n"
    printf "\\t[-T host]\\tTarget [user@]hostname (for remote syncing, uses ssh)\\n"
    printf "\\t[-a ssh_args]\\tUsed for additional ssh commands executed on the Target host (default: %s)\\n" "${SSH_ARGS}"
    printf "\\t[-r dir]\\tDirectory to send redirected zfs send files\\n"
    printf "\\t[-c]\\t\\tClean (destroy) snaphots on the destination not on the source (more recent that the latest common ss)\\n"
    printf "\\t[-p type]\\tPurge (destroy) snaphots on the destination not on the source, limiting to type (i.e. daily, weekly, monthly)\\n"
    printf "\\t[-m]\\t\\tEnable mbuffer\\n"
    printf "\\t[-n]\\t\\tDry run\\n"
    printf "\\t[-v]\\t\\tVerbose mode\\n"
    printf "\\t[-d]\\t\\tDebug mode\\n"
    printf "\\t[-x file]\\tFile with list of filesystems to exclude (one per line)\\n"
    printf "\\tdestination\\tDestination zfs filesystem\\n"
    exit 1
}

while getopts "s:T:a:r:cp:mnvdx:" _opt; do
    case "$_opt" in
    s) SRC_VOL="$OPTARG" ;;
    T) TARGET="$OPTARG" ;;
    a) SSH_ARGS="$OPTARG" ;;
    r) REDIRECT="$OPTARG" ;;
    c) TRIM_SS="YES" ;;
    p) PURGE_TYPE="$OPTARG" ;;
    m) MBUFFER="YES" ;;
    n) DRY_RUN="YES" ;;
    v) VERBOSE="YES" ;;
    d) DEBUG="YES" ;;
    x) EXCLUDES="$OPTARG" ;;
    *) usage ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 1 ]; then
    usage
fi
DEST_FS="${1}"

if [ -z "${EXCLUDES}" ]; then
    EXCLUDES="${EXCLUDES_BASE}"
    if [ -n "${TARGET}" ]; then
        EXCLUDES="${EXCLUDES}-${TARGET}"
    fi
    dest_dir="$( echo "${DEST_FS}" | sed 's|/|_|g' )"
    EXCLUDES="${EXCLUDES}-${dest_dir}"
fi
if [ ! -f "${EXCLUDES}" ]; then
    echo "WARNING: Excludes file ${EXCLUDES} doesn't exist."
fi


# $1 - command(s) to run
run()
{
    if [ -n "${DEBUG}" ]; then
        echo "$1"
    fi
    if [ -n "${DRY_RUN}" ]; then
        return
    fi

    eval "$1" || { echo "Error executing command: $1"; exit 1; }
}

# $1 - command(s) to run
run_dest()
{
    CMD="$1"
    if [ -n "${TARGET}" ]; then
        CMD="ssh ${SSH_ARGS} ${TARGET} ${CMD}"
    fi

    run "${CMD}"
}


# $1 - source snapshot
# $2 - destination filesystem
# $3 - incremental snapshot to send differences since
send()
{
    if [ -z "${3}" ]; then
        msg="Sending ${1} to ${2}"
        send_args="${1}"
    else
        snapshot=$( echo "${1}" | cut -d @ -f 2 )
        msg="Updating ${2} to @${snapshot} since @${3}"
        send_args="-I @${3} ${1}"
    fi

    size=$( zfs send -nv ${send_args} 2>&1 | tail -n 1 | sed "s|total estimated size is ||g" )
    if [ "${size}" = "0" ] && [ -z "${VERBOSE}" ]; then
        # skip echoing zfs snapshots that look empty
        msg=
    else
        msg="${msg} (size=${size})"
    fi

    CMD="zfs send ${send_args}"

    if [ -n "${REDIRECT}" ]; then
        file=$( echo "${1}" | sed "s|/|_|g" )
        CMD="${CMD} > ${REDIRECT}/${file}.zfs"
        run "${CMD}"
        return
    fi

    CMD="${CMD} | "

    mbuffer_args="-q -s 128k"
    if [ -n "${TARGET}" ]; then
        if [ -n "${MBUFFER}" ]; then
            CMD="${CMD}mbuffer ${mbuffer_args} 2>/dev/null | "
        fi
        CMD="${CMD}ssh ${SSH_ARGS} ${TARGET} \""
    fi

    if [ -n "${MBUFFER}" ]; then
        CMD="${CMD}mbuffer ${mbuffer_args} 2>/dev/null | "
    fi

    recv_args=
    if [ -n "${VERBOSE}" ]; then
        recv_args="-v "
    fi
    recv_args="${recv_args}-F"
    CMD="${CMD}zfs receive ${recv_args} $2"

    if [ -n "${TARGET}" ]; then
        CMD="${CMD}\""
    fi

    if [ -n "${msg}" ]; then
        echo "${msg}"
    fi
    run "${CMD}"
}

# $1 - needle
# $2 - haystack
contains() { case $2 in *$1*) true;; *) false;; esac; }
beginswith() { case "$2" in $1*) true;; *) false;; esac; }
endswith() { case "$2" in *$1) true;; *) false;; esac; }



# get all the snapshots (once each for source & dest)
# these are the only zfs calls (besides send & recv)
OLD_DRY_RUN=${DRY_RUN}
OLD_DEBUG=${DEBUG}
DRY_RUN=
DEBUG=
SRC_LIST=$( run "zfs list -r -H -o name -t snapshot -s creation ${SRC_VOL} 2>/dev/null" )
DST_LIST=$( run_dest "zfs list -r -H -o name -t snapshot -s creation \"${DEST_FS}\" 2>/dev/null" )
DRY_RUN=${OLD_DRY_RUN}
DEBUG=${OLD_DEBUG}

# trim the destination (recursively) from the list of sources (when we aren't shipping to another host)
if [ -z "${TARGET}" ]; then
    SRC_LIST=$( echo "${SRC_LIST}" | grep -v -e "^${DEST_FS}/" )
fi

# derive the filesystems from eash full list (of snapshots)
SRC_FS_LIST=$( echo "${SRC_LIST}" | cut -s -d @ -f 1 | sort | uniq )
DST_FS_LIST=$( echo "${DST_LIST}" | cut -s -d @ -f 1 | sort | uniq )

# find destination filesystems not found on the source
for dst_fs in $( echo "${DST_FS_LIST}" | sed "s|^${DEST_FS}/||g" ); do
    if [ -z "${dst_fs}" ]; then continue; fi

    if echo "${SRC_FS_LIST}" | grep -q -e "^${dst_fs}$"; then
        # do nothing
        true
    else
        extra_fs="${extra_fs} ${DEST_FS}/${dst_fs}"
    fi
done

if [ -n "${VERBOSE}" ] && [ -n "${extra_fs}" ]; then
    echo "These destination filesystems do not exist on the source:"
    echo "${extra_fs}" | sed -e 's|^ *||g' | tr ' ' '\n'
    echo
fi

# iterate all the source filesystems
for src_fs in ${SRC_FS_LIST}; do
    #dest="${DEST_FS}/${src_fs}"
    dest=$( echo "${src_fs}" | sed "s|^${SRC_VOL}/||g" )
    dest="${DEST_FS}/${dest}"
    src_first_ss=
    dst_first_ss=
    dst_last_ss=
    latest_match=
    extra_snapshots=
    purged_snapshots=

    # skip excluded filesystems (if specified)
    if [ ! -f "${EXCLUDES}" ]; then
        # do nothing
        true
    elif echo "${src_fs}" | grep -q -f "${EXCLUDES}"; then
        excluded_fs="${excluded_fs} ${src_fs}"
        continue
    fi

    # roll through the destination snapshots
    for dest_ss in $( echo "${DST_LIST}" | grep -e "^${dest}@" ); do
        snapshot=$( echo "${dest_ss}" | cut -d @ -f 2 )
        source="${src_fs}@${snapshot}"

        if [ -z "${dst_first_ss}" ]; then
            dst_first_ss="${snapshot}"
        fi

        # check to see if this destination snapshot exists on the source
        if echo "${SRC_LIST}" | grep -q -e "^${source}$"; then
            latest_match="${snapshot}"
        else
            # keep track of extra snapshots no longer on the source
            extra_snapshots="${extra_snapshots} ${snapshot}"
        fi

        dst_last_ss="${snapshot}"
    done

    # find the earliest source snapshot
    src_first_ss=$( echo "${SRC_LIST}" | grep -e "^${src_fs}@" | head -n 1 | cut -d @ -f 2 )

    # find the latest source snapshot
    src_last_ss=$( echo "${SRC_LIST}" | grep -e "^${src_fs}@" | tail -n 1 | cut -d @ -f 2 )

    # no matching snapshots were found, (re)send filesystem
    if [ -z "${latest_match}" ]; then
        if echo "${DST_FS_LIST}" | grep -q -e "^${dest}"; then
            echo "Removing ${dest} (for rebuild)..."
            run_dest "zfs destroy -r ${dest}"
        fi

        send "${src_fs}@${src_first_ss}" "${dest}"
        latest_match="${src_first_ss}"
        dst_last_ss="${src_first_ss}"
    fi

    # purge snapshots on the destination no longer on the source (newer than the most recent common snapshot)
    # we do this before the incremental sync to trim out any snapshots that may make the "zfs recv -F" complain
    if [ -n "${TRIM_SS}" ] && [ -n "${extra_snapshots}" ]; then
        match_found=
        for dest_ss in $( echo "${DST_LIST}" | grep -e "^${dest}@" ); do
            snapshot=$( echo "${dest_ss}" | cut -d @ -f 2 )

            if [ -n "${match_found}" ]; then
                echo "Trimming ${dest}@${snapshot}..."
                run_dest "zfs destroy ${dest}@${snapshot}"
                purged_snapshots="${purged_snapshots} ${snapshot}"
            elif [ "${snapshot}" = "${latest_match}" ]; then
               match_found="${snapshot}"
            fi
        done
    fi

    # send incremental, skip if the destination is up-to-date
    if [ "${dst_last_ss}" = "${src_last_ss}" ]; then
        echo "Skipping ${dest}, it is current (@${dst_last_ss})."
    else
        send "${src_fs}@${src_last_ss}" "${dest}" "${latest_match}"
    fi

    if [ -n "${DEBUG}" ] && [ "${dst_first_ss}" ] && [ "${dst_first_ss}" != "${src_first_ss}" ]; then
        echo "  Destination snapshots start at @${dst_first_ss} and source starts with @${src_first_ss}."
    fi

    # purge snapshots on the destination no longer on the source, limiting to snapshots with the specified type(s)
    if [ -n "${PURGE_TYPE}" ] && [ -n "${extra_snapshots}" ]; then
        for snapshot in ${extra_snapshots}; do
            # skip purge for snapshot already marked above for purge
            if contains "${snapshot}" "${purged_snapshots}"; then continue; fi

            # skip purge for snapshots that do not match the specified type(s)
            for suffix in $(echo ${PURGE_TYPE} | tr "," "\n"); do
                if endswith "${suffix}" "${snapshot}"; then
	                echo "Purging ${dest}@${snapshot}..."
                    run_dest "zfs destroy ${dest}@${snapshot}"
		        fi
	        done
        done
    fi
done

if [ -n "${VERBOSE}" ] && [ -n "${excluded_fs}" ]; then
    echo
    echo "These source filesystems were excluded:"
    echo "${excluded_fs}" | sed -e 's|^ *||g' | tr ' ' '\n'
    echo
fi
